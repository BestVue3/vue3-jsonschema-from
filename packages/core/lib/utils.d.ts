import { Schema, VueJsonSchemaConfig } from './types';
export declare function optionsList(schema: Schema): {
    key: any;
    value: any;
}[];
export declare function resolveSchema(schema: Schema, rootSchema?: {}, formData?: {}): Schema;
export declare function retrieveSchema(schema: any, rootSchema?: {}, formData?: any): Schema;
export declare const ADDITIONAL_PROPERTY_FLAG = "__additional_property";
export declare function stubExistingAdditionalProperties(schema: Schema, rootSchema?: Schema, formData?: any): Schema;
export declare function findSchemaDefinition($ref: string, rootSchema?: {}): Schema;
export declare function mergeSchemas(obj1: any, obj2: any): any;
export declare function getVJSFConfig(schema: Schema, uiSchema: VueJsonSchemaConfig | undefined): VueJsonSchemaConfig;
export declare function isObject(thing: any): boolean;
export declare function isEmptyObject(thing: any): boolean;
export declare function hasOwnProperty(obj: any, key: string): boolean;
export declare function getSchemaType(schema: Schema): string | undefined;
export declare const guessType: (value: any) => "object" | "string" | "number" | "boolean" | "array" | "null";
export declare function isConstant(schema: Schema): boolean;
export declare function isSelect(_schema: any, rootSchema?: Schema): boolean;
export declare function isMultiSelect(schema: Schema, rootSchema?: Schema): boolean;
export declare function getMatchingOption(formData: any, options: Schema[], isValid: (schema: Schema, data: any) => boolean): number;
export declare function mergeDefaultsWithFormData(defaults: any, formData: any): any;
export declare function getDefaultFormState(_schema: Schema, formData: any): any;
